package com.cdvcloud.douting.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cdvcloud.douting.common.CommonParameters;
import com.cdvcloud.douting.common.Configuration;
import com.cdvcloud.douting.common.GeneralStatus;
import com.cdvcloud.douting.common.HttpCommonUtil;
import com.cdvcloud.douting.common.ValidateCommonParam;
import com.cdvcloud.douting.dao.RedisUtilDao;
import com.cdvcloud.douting.dao.VideoRoomDao;
import com.cdvcloud.douting.domain.QueryBasicObject;
import com.cdvcloud.douting.domain.VideoRoom;
import com.cdvcloud.douting.service.LiveAppService;
import com.cdvcloud.douting.service.LiveChannelService;
import com.cdvcloud.douting.service.NumCountService;
import com.cdvcloud.douting.service.RedEnvelopeAppService;
import com.cdvcloud.rms.util.JSONUtils;
import com.cdvcloud.rms.util.ResponseObject;
import com.cdvcloud.rms.util.StringUtil;
/**
 * APP直播管理
 *
 */
@Service
public class LiveAppServiceImpl extends BaseServiceImpl implements LiveAppService {
	
	@Autowired
	private LiveChannelService liveChannelService;

	@Autowired
	private VideoRoomDao videoRoomDao;
	@Autowired
	private  RedisUtilDao redisUtilDao;
	@Autowired
    private HttpCommonUtil httpCommonUtil;
	
	@Autowired
    private RedEnvelopeAppService redEnvelopeAppService; 
	
	
//	@Autowired
//    private TaskProgressAppService taskProgressAppService; 
	@Autowired
	private NumCountService numCountService;
	/**
	 * 开启直播
	 * isLive 为直播状态 0 为未直播 1为正在直播
	 */
	@Override
	public Map<String,	Object> startLive(CommonParameters commonParameters, Map<String, Object> param) {
		String id = String.valueOf(param.get("virtualId"));
		Map<String,	Object> query = new HashMap<String,	Object>();
		query.put("virtualId", id);
		
		Map<String,	Object> videoRoomMap = videoRoomDao.queryVideoRoom(query);
		if(videoRoomMap==null){
			return null;
		}
		//判断直播间状态是否有人在直播
		Integer isLive = 0;
		if(videoRoomMap.get("isLive")!= null){
			isLive = (Integer) videoRoomMap.get("isLive");
		}
		String fansId = null;
		if(videoRoomMap.get("anchorId")!=null){
			fansId = String.valueOf(videoRoomMap.get("anchorId"));
		}
		if(isLive==1){
			return null;
		}

		id = String.valueOf(videoRoomMap.get("_id"));
		fansId = commonParameters.getUserId();
		Map<String, Object> update = new HashMap<>();
		update.put("isLive", 1);
		update.put("anchorId", fansId);
		long temp = videoRoomDao.updateVideoRoomById(id, update);
		if(temp<=0){
			return null;
		}
		Map<String, Object> data = new HashMap<>();
		data.put("pushUrl", videoRoomMap.get("vPushAddress"));
		data.put("id", id);
		return data;
	}
	/**
	 * 关闭直播
	 */
	@SuppressWarnings("unused")
	@Override
	public Boolean stopLive(CommonParameters commonParameters, Map<String, Object> param) {
		String id = String.valueOf(param.get("virtualId"));
		Map<String,	Object> query = new HashMap<String,	Object>();
		query.put("virtualId", id);
		
		Map<String,	Object> videoRoomMap = videoRoomDao.queryVideoRoom(query);
		if(videoRoomMap==null){
			return null;
		}
		ResponseObject responseObject = null;
		//停止拉流
		String taskId = null;
		if(videoRoomMap.get("taskId")!=null){
			taskId = String.valueOf(videoRoomMap.get("taskId"));
		}
		if(taskId!=null){
				param.put("taskId", taskId);
				responseObject = liveChannelService.stop4Json(commonParameters, param);
		}
		//停止收录
		String includeId = null;
		if(videoRoomMap.get("includeId")!=null){
				includeId = String.valueOf(videoRoomMap.get("includeId"));
		}
		if(includeId!=null){
				param.put("taskId", includeId);
				responseObject = liveChannelService.stopInclude(commonParameters, param);
		}	
		
		//删除通道并释放资源
		String virtualId = null;
		if(videoRoomMap.get("virtualId")!=null){
			virtualId = String.valueOf(videoRoomMap.get("virtualId"));
		}
		if(virtualId!=null){
				param.put("virtualId", virtualId);
				liveChannelService.deleteLiveChannel(commonParameters, param);
		}
		//更新直播间信息 修改为以有人直播
		id = String.valueOf(videoRoomMap.get("_id"));
		Map<String, Object> update = new HashMap<>();
		update.put("isLive", 0);
		update.put("anchorId", "");
		update.put("virtualId", "");
		long temp = videoRoomDao.updateVideoRoomById(id, update);
		if(temp<=0){
			return false;
		}
		return true;
	}
	/**
	 * 查询直播间直播地址（结束直播是查询回看地址）
	 * vPlayHlsAddress APP端直播地址
	 * apiurl 回看地址
	 */
	@Override
	public Map<String, Object> queryLiveRoomById(CommonParameters commonParameters, Map<String, Object> param) {
		String id = String.valueOf(param.get("videRoomId"));
		Map<String,	Object> data = new HashMap<String,	Object>();
		
		
		Map<String,	Object> videoRoomMap = videoRoomDao.queryVideoRoomById(id);
		Integer isLive = 0;
		if(videoRoomMap.get("isLive")!=null){
			isLive = (Integer) videoRoomMap.get("isLive");
		}
		//isLive = 1时为正在直播。0时为结束直播
		if(isLive==1){
			data.put("url", videoRoomMap.get("vPlayHlsAddress")==null?"":videoRoomMap.get("vPlayHlsAddress"));
		}
		if(isLive==0){
			data.put("url", videoRoomMap.get("liveReviewUrl")==null?"":videoRoomMap.get("liveReviewUrl"));
		}
		data.put("type", videoRoomMap.get("type")==null?"":videoRoomMap.get("type"));
		data.put("status", videoRoomMap.get("status")==null?"":videoRoomMap.get("status"));
		data.put("status_zh", videoRoomMap.get("status_zh")==null?"":videoRoomMap.get("status_zh"));
		data.put("isLive", videoRoomMap.get("isLive")==null?"":videoRoomMap.get("isLive"));
		data.put("thumbnailUrl", videoRoomMap.get("thumbnailUrl")==null?"":videoRoomMap.get("thumbnailUrl"));
		data.put("name", videoRoomMap.get("name")==null?"":videoRoomMap.get("name"));
		data.put("startTime", videoRoomMap.get("startTime")==null?"":videoRoomMap.get("startTime"));
		data.put("endTime", videoRoomMap.get("endTime")==null?"":videoRoomMap.get("endTime"));
		data.put("remark", videoRoomMap.get("remark")==null?"":videoRoomMap.get("remark"));
		data.put("ctime", videoRoomMap.get("ctime")==null?"":videoRoomMap.get("ctime"));
		Map<String, String> numCount = numCountService.queryNumCountByObject("user", commonParameters, String.valueOf(videoRoomMap.get(VideoRoom.ID)));
		data.putAll(numCount);
		return data;
	}

	//推流成功后开始收录
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> startIncludeByApp(CommonParameters commonParameters, Map<String, Object> param) {
		Map<String,	Object> data = new HashMap<String,	Object>();
		String id = String.valueOf(param.get("virtualId"));
		Map<String,	Object> query = new HashMap<String,	Object>();
		query.put("virtualId", id);
		
		Map<String,	Object> videoRoomMap = videoRoomDao.queryVideoRoom(query);
		Integer isLive = 0;
		if(videoRoomMap.get("isLive")!= null){
			isLive = (Integer) videoRoomMap.get("isLive");
		}
		if(isLive==0){
			return null;
		}
		//拉流地址
		String srcStreamUrl = null;
		if(videoRoomMap.get("vPlayHlsAddress")!=null){
			srcStreamUrl = String.valueOf(videoRoomMap.get("vPlayHlsAddress"));
		}
		
		String pushUrl = null;
		if(videoRoomMap.get("vPushAddress")!=null){
			pushUrl = String.valueOf(videoRoomMap.get("vPushAddress"));
		}
		String taskId = null;
		ResponseObject responseObject = null;
		if(srcStreamUrl!=null && pushUrl!=null){
			param.put("srcStreamUrl", srcStreamUrl);
			param.put("pushUrl", pushUrl);
			//下发拉流
			responseObject = liveChannelService.start4Json(commonParameters, param);
			if(responseObject!=null&&responseObject.getCode()==0){
				data = (Map<String, Object>) responseObject.getData();
				taskId = String.valueOf(data.get("taskId"));
			}else{
				return null;
			}
		}
		//开始收录
		//收录地址
		String hlsUrl = null;
		if(videoRoomMap.get("vPlayHlsAddress")!=null){
			hlsUrl = String.valueOf(videoRoomMap.get("vPlayHlsAddress"));
		}
		if(hlsUrl!=null){
			param = new HashMap<>();
			param.put("hlsUrl", hlsUrl);
			responseObject = liveChannelService.startInclude(commonParameters, param);
		}
		if(responseObject!=null&&responseObject.getCode()==0){
			data = (Map<String, Object>) responseObject.getData();
		}else{
			data = new HashMap<String,	Object>();
		}
		//更新直播间信息 修改为以有人直播

		String includeId = String.valueOf(data.get("taskId"));
		String liveReviewUrl = String.valueOf(data.get("playCdnUrl"));
		id = String.valueOf(videoRoomMap.get("_id"));
		Map<String, Object> update = new HashMap<>();
		update.put("includeId", includeId);
		update.put("taskId", taskId);
		update.put("liveReviewUrl", liveReviewUrl);
		long temp = videoRoomDao.updateVideoRoomById(id, update);
		if(temp<=0){
			return null;
		}
		//启动定时红包
		param = new HashMap<String, Object>();
		param.put("accessToken", "accessToken");
		param.put("timeStamp",  System.currentTimeMillis());
		param.put("pid", id);
		redEnvelopeAppService.timedRedEnvelope(commonParameters, param);
		
		
		data = new HashMap<>();
		data.put("taskId", taskId);
		return data;
	}
	/**
     * 创建评论
     *
     */
	@Override
	public ResponseObject createLiveComment(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
        String ip = Configuration.getConfigValue(QueryBasicObject.INTERACTIVEURL);
        String api = Configuration.getConfigValue("createCommentEfficient");
        String url = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "core") + api;
        
        String videoRoomId = String.valueOf(param.get("sid"));
        String fansId = String.valueOf(param.get("doCommentId"));
        List<String> result = redisUtilDao.queryProhibitFansList(videoRoomId);
		for (String string : result) {
			if(string.indexOf(fansId)>=0){
				Map<String, Object> msg = new HashMap<>();
				msg.put("msg", "粉丝已禁言");
				responseObject.setCode(GeneralStatus.failure.status);
				responseObject.setMessage(GeneralStatus.failure.detail);
				responseObject.setData(msg);
				return responseObject;
			}
		}
		 //补全 状态信息
        param.put(QueryBasicObject.STATUS, 1);
        param.put(QueryBasicObject.STATUS_ZH, "已未审核");
        param.put(QueryBasicObject.ISCACHE, "yes");
		String responseString = httpCommonUtil.doPost(url, param);
		  if (!StringUtil.isEmpty(responseString)) {
	           responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	          //统计计数
	           if(param.get("pid")!=null&&param.get("sid")!=null){
	        	   String sid = String.valueOf(param.get("sid"));
	        	   numCountService.doNumCount("fans", commonParameters, "commentNum", sid, 1, "comment");
//	          
//	        	 //创建评论任务详情
//	           	param = new HashMap<String, Object>();
//	           	Map<String, Object> data = new HashMap<String,Object>();
//	           	data.put("firstComment", "newbieTask");
//	           	data.put("dailyComment", "dailyTask");
//	            param.put("conditionParam", data);
//	            param.put("others",1);
//	           	taskProgressAppService.updateTaskProgress(commonParameters, param);
	           }
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}
	/**
     * 网红直播间轮询接口
     *
     */
	public Map<String, Object> pollingLiveData(CommonParameters commonParameters, Map<String, Object> param) {
		Map<String, Object> data = new HashMap<String, Object>();
		String pid = String.valueOf(param.get("id"));
		List<String> goodsList = redisUtilDao.queryLiveGoodsList(pid);
		List<String> prohibitFansList = redisUtilDao.queryProhibitFansList(pid);
		String notice = redisUtilDao.getNotice(pid);
		List<String> redEnvelopeList = redisUtilDao.getRedEnvelope(pid);
		List<Map<String, Object>> deleteCommentIdsList = redisUtilDao.getDeleteCommentIds(pid);
		List<Map<String, Object>> commentList = redisUtilDao.queryCommentEfficient(pid);
		
		data.put("goodsList", goodsList);
		data.put("prohibitFansList", prohibitFansList);
		data.put("notice", notice);
		data.put("redEnvelopeList", redEnvelopeList);
		data.put("commentList", commentList);
		data.put("deleteCommentIdsList", deleteCommentIdsList);
		return data;
	}
}
