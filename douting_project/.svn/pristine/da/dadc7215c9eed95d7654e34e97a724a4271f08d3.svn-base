package com.cdvcloud.douting.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cdvcloud.douting.common.CommonParameters;
import com.cdvcloud.douting.common.HttpCommonUtil;
import com.cdvcloud.douting.common.ValidateCommonParam;
import com.cdvcloud.douting.domain.Global;
import com.cdvcloud.douting.service.LiveChannelService;
import com.cdvcloud.rms.dao.BasicDao;
import com.cdvcloud.rms.util.DateUtil;
import com.cdvcloud.rms.util.JSONUtils;
import com.cdvcloud.rms.util.ResponseObject;
import com.cdvcloud.rms.util.StringUtil;

/**
 * 调用其他服务
 *
 * @author SongYuanKun
 * @date 2017/11/9
 */
@Service
public class LiveChannelServiceImpl extends BaseServiceImpl implements LiveChannelService {
    @Autowired
    private HttpCommonUtil httpCommonUtil;
    
    @Autowired
	private BasicDao basicdao;
    
    
    public static Map<String, Object> tokenMap = new HashMap<String, Object>();

	// 获取token
	@SuppressWarnings("unchecked")
	public String sctoken(CommonParameters commonParameters) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"auth/token/getAccessToken4Json/";
		String accessToken = "";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		try {
			tokenMap.put("accessKey", glob.get(""));
			tokenMap.put("timeStamp", System.currentTimeMillis());
			String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
			responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
			Map<String, Object> tokenmap = (Map<String, Object>) responseObject.getData();
			accessToken = String.valueOf(tokenmap.get("accessToken"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return accessToken;
	}
    
	
	public String getToken(CommonParameters commonParameters) {
		if (StringUtil.isEmpty(String.valueOf(tokenMap.get(commonParameters)))) {
			String token = sctoken(commonParameters);
			tokenMap.put(commonParameters.getCompanyId(), token);
			tokenMap.put("time" + commonParameters.getCompanyId(), System.currentTimeMillis());
			return token;
		} else {
			Long time = Long.parseLong(String.valueOf(tokenMap.get("time" + commonParameters.getCompanyId())));
			Long nowtime = System.currentTimeMillis();
			String token = String.valueOf(tokenMap.get(commonParameters));
			if (StringUtil.isEmpty(token)) {
				token = sctoken(commonParameters);
				tokenMap.put(commonParameters.getCompanyId(), token);
				tokenMap.put("time" + commonParameters.getCompanyId(), System.currentTimeMillis());
			} else {
				if ((nowtime - time) > 5400) {
					token = sctoken(commonParameters);
					tokenMap.put(commonParameters.getCompanyId(), token);
					tokenMap.put("time" + commonParameters.getCompanyId(), System.currentTimeMillis());
				}
			}
			return token;
		}
	}
    
    /**
     * 创建直播通道
     */
	@Override
	public ResponseObject createLiveChannel(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/create4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
//		tokenMap.put("type", 0);
		//实体地址和虚拟地址绑定后的回调地址
		String callBack = "";
		tokenMap.put("callbackUrl", callBack);
		tokenMap.put("timeStamp", System.currentTimeMillis());
		 String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
	        if (!StringUtil.isEmpty(responseString)) {
	            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}


	/**
	 * 删除直播通道
	 */
	@Override
	public ResponseObject deleteLiveChannel(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/delete4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("virtualId", param.get("virtualId"));
		tokenMap.put("timeStamp", System.currentTimeMillis());
		String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
	        if (!StringUtil.isEmpty(responseString)) {
	            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}

	/**
	 * 开始拉流
	 */
	@Override
	public ResponseObject start4Json(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/start4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("virtualId", param.get("virtualId"));
		tokenMap.put("srcUrl", param.get("srcUrl"));
		tokenMap.put("output", "");
		tokenMap.put("timeStamp", System.currentTimeMillis());
		 String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
	        if (!StringUtil.isEmpty(responseString)) {
	            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}

	/**
	 * 停止拉流
	 */
	@Override
	public ResponseObject stop4Json(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/stop4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("timeStamp", System.currentTimeMillis());
		tokenMap.put("virtualId", param.get("virtualId"));
		 String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
	        if (!StringUtil.isEmpty(responseString)) {
	            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}


	/**
	 * APP端紧急停播
	 */
	@Override
	public ResponseObject closeLiveChannel(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/hlsStop4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("timeStamp", System.currentTimeMillis());
		tokenMap.put("virtualId", param.get("virtualId"));
		 String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
	        if (!StringUtil.isEmpty(responseString)) {
	            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
	        } else {
	            ValidateCommonParam.innerError(responseObject);
	        }
	        return responseObject;
	}
	/**
	 * 恢复APP直播
	 * @param commonParameters
	 * @param param
	 * @return
	 */
	public ResponseObject newchannelkaiqi(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v1/onsiteLive/task/hlsStart4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("timeStamp",  System.currentTimeMillis());
		tokenMap.put("virtualId", param.get("virtualId"));
		String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
        if (!StringUtil.isEmpty(responseString)) {
            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
        } else {
            ValidateCommonParam.innerError(responseObject);
        }
        return responseObject;
	}

	/**
	 * 开始收录
	 */
	@Override
	public ResponseObject startInclude(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v2/record/task/create4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("timeStamp",  System.currentTimeMillis());
		tokenMap.put("srcStreamUrl", param.get("srcStreamUrl"));
		tokenMap.put("startTime", DateUtil.getCurrentDateTime());
		tokenMap.put("splitType", 0);
		tokenMap.put("splitSize", 3600);
		tokenMap.put("format", "mp4");
		String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
        if (!StringUtil.isEmpty(responseString)) {
            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
        } else {
            ValidateCommonParam.innerError(responseObject);
        }
        return responseObject;
	}
	/**
	 * 停止收录
	 */
	@Override
	public ResponseObject stopInclude(CommonParameters commonParameters, Map<String, Object> param) {
		ResponseObject responseObject = new ResponseObject();
		Map<String, Object> glob = basicdao.findOne(Global.GLOBAL);
		String ip = String.valueOf(glob.get(""));
		String urlToken = ip + ValidateCommonParam.getCommonParametersUrl(commonParameters, "ONZHIB") +"v2/record/task/cancel4Json/";
		Map<String, Object> tokenMap = new HashMap<String, Object>();
		tokenMap.put("accessToken", getToken(commonParameters));
		tokenMap.put("timeStamp",  System.currentTimeMillis());
		tokenMap.put("taskId", param.get("taskId"));
		String responseString = httpCommonUtil.doPost(urlToken, tokenMap);
        if (!StringUtil.isEmpty(responseString)) {
            responseObject = JSONUtils.toObject(responseString, ResponseObject.class);
        } else {
            ValidateCommonParam.innerError(responseObject);
        }
        return responseObject;
	}
	
}
