package com.cdvcloud.douting.web.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cdvcloud.douting.common.CommonParameters;
import com.cdvcloud.douting.common.Constants;
import com.cdvcloud.douting.common.GeneralStatus;
import com.cdvcloud.douting.common.ValidateCommonParam;
import com.cdvcloud.douting.domain.Activity;
import com.cdvcloud.douting.service.PostAppServic;
import com.cdvcloud.rms.util.JSONUtils;
import com.cdvcloud.rms.util.ResponseObject;

/**
 * 帖子 管理
 *
 * @author zhangyuelong
 */

@Controller
@RequestMapping(value = "/{companyId}/{appCode}/{userId}/{serviceCode}/")
public class PostAppApiController {
    private static final Logger logger = Logger.getLogger("ValidateCommonParam");


    @Autowired
    private PostAppServic postAppServic;

    /**
     * 创建帖子
     *
     * @param companyId        租户ID
     * @param appCode          应用标识
     * @param userId           用户ID
     * @param serviceCode      服务标识
     * @param commonParameters commonParameters
     * @param strJson          请求参数
     * @return 响应对象
     */
    @ResponseBody
    @RequestMapping("v1/appApi/createPostByApp")
    public ResponseObject createPostByApp(@PathVariable String companyId, @PathVariable String appCode, @PathVariable String userId, @PathVariable String serviceCode, @Validated CommonParameters commonParameters, @RequestBody String strJson) {
        ResponseObject resObj = new ResponseObject();
        logger.info(ValidateCommonParam.getRequestInfo(companyId, appCode, userId, serviceCode, strJson));
        try {
            //数据解析
            Map<String, Object> jsonMap = JSONUtils.json2map(strJson);
            Map<String, Object> errorMap = new HashMap<String, Object>();
            //参数校验
            boolean validate = ValidateCommonParam.validateCommonParam(commonParameters, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : createPostByApp " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            //用户非空校验
            boolean checkFans = postAppServic.checkFans(commonParameters);
            if (!checkFans) {
                logger.error("class : PostAppApiController --> method : createPostByApp " + GeneralStatus.user_error.enDetail);
                ValidateCommonParam.userError(resObj);
                return resObj;
            }
           //用户验证
            boolean checkFansStatus = postAppServic.checkFansStatus(commonParameters);
            if (!checkFansStatus) {
                logger.error("class : PostAppApiController --> method : createPostByApp " + GeneralStatus.user_status_error.enDetail);
                ValidateCommonParam.userStatusError(resObj);
                return resObj;
            }
            
          //参数非空校验
            List<String> names = new ArrayList<String>();
            names.add("userType");
            names.add("content");
            names.add("type");
            names.add("parents");
            names.add("releaseId");
            names.add("releaseName");
            validate = ValidateCommonParam.validateValue(names, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : createPostByApp " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            resObj = postAppServic.createPostByApp(commonParameters, jsonMap);
        } catch (Exception e) {
        	e.printStackTrace();
            ValidateCommonParam.innerError(resObj);
            logger.error("class : PostAppApiController --> method : createPostByApp处理异常！");
        }
        return resObj;
    }


    /**
     * 根据条件分页查询帖子列表
     *
     * @param companyId        租户ID
     * @param appCode          应用标识
     * @param userId           用户ID
     * @param serviceCode      服务标识
     * @param commonParameters commonParameters
     * @param strJson          请求参数
     * @return 响应对象
     */
    @ResponseBody
    @RequestMapping("v1/appApi/queryPostsByApp")
    public ResponseObject queryPostsByApp(@PathVariable String companyId, @PathVariable String appCode, @PathVariable String userId, @PathVariable String serviceCode, @Validated CommonParameters commonParameters, @RequestBody String strJson) {
        ResponseObject resObj = new ResponseObject();
        logger.info(ValidateCommonParam.getRequestInfo(companyId, appCode, userId, serviceCode, strJson));
        try {
            //数据解析
            Map<String, Object> jsonMap = JSONUtils.json2map(strJson);
            Map<String, Object> errorMap = new HashMap<String, Object>();
            //参数校验
            boolean validate = ValidateCommonParam.validateCommonParam(commonParameters, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : queryPostsByApp " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            //用户非空校验
            boolean checkFans = postAppServic.checkFans(commonParameters);
            if (!checkFans) {
                logger.error("class : PostAppApiController --> method : queryPostsByApp " + GeneralStatus.user_error.enDetail);
                ValidateCommonParam.userError(resObj);
                return resObj;
            }
            
            
            
          //参数非空校验
            List<String> names = new ArrayList<String>();
            names.add("userType");
            names.add("currentPage");
            names.add("pageNum");
            names.add("sort");
            validate = ValidateCommonParam.validateValue(names, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : queryPostsByApp " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            resObj = postAppServic.queryPostsByApp(commonParameters, jsonMap);
        } catch (Exception e) {
        	e.printStackTrace();
            ValidateCommonParam.innerError(resObj);
            logger.error("class : PostAppApiController --> method : queryPostsByApp处理异常！");
        }
        return resObj;
    }
    
    
    /**
     * 删除评论
     *
     * @param companyId        租户ID
     * @param appCode          应用标识
     * @param userId           用户ID
     * @param serviceCode      服务标识
     * @param commonParameters commonParameters
     * @param strJson          请求参数
     * @return 响应对象
     */
    @ResponseBody
    @RequestMapping("v1/appApi/deletePost")
    public ResponseObject deletePost(@PathVariable String companyId, @PathVariable String appCode, @PathVariable String userId, @PathVariable String serviceCode, @Validated CommonParameters commonParameters, @RequestBody String strJson) {
        ResponseObject resObj = new ResponseObject();
        logger.info(ValidateCommonParam.getRequestInfo(companyId, appCode, userId, serviceCode, strJson));
        try {
            //数据解析
            Map<String, Object> jsonMap = JSONUtils.json2map(strJson);
            Map<String, Object> errorMap = new HashMap<String, Object>();
            //参数校验
            boolean validate = ValidateCommonParam.validateCommonParam(commonParameters, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : deletePost " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            //用户非空校验
            boolean checkFans = postAppServic.checkFans(commonParameters);
            if (!checkFans) {
                logger.error("class : PostAppApiController --> method : deletePost " + GeneralStatus.user_error.enDetail);
                ValidateCommonParam.userError(resObj);
                return resObj;
            }
            //用户验证
            boolean checkFansStatus = postAppServic.checkFansStatus(commonParameters);
            if (!checkFansStatus) {
                logger.error("class : PostAppApiController --> method : deletePost " + GeneralStatus.user_status_error.enDetail);
                ValidateCommonParam.userStatusError(resObj);
                return resObj;
            }
            //参数非空校验
            List<String> names = new ArrayList<String>();
            names.add("userType");
            names.add("postId");
            validate = ValidateCommonParam.validateValue(names, jsonMap, errorMap);
            if (!validate) {
                logger.error("class : PostAppApiController --> method : deletePost " + errorMap.get(Constants.MESSAGE));
                ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
                return resObj;
            }
            resObj = postAppServic.deletePost(commonParameters, jsonMap);
        } catch (Exception e) {
        	e.printStackTrace();
            ValidateCommonParam.innerError(resObj);
            logger.error("class : PostAppApiController --> method : deletePost处理异常！");
        }
        return resObj;
    }
    /**
     * 当前用户参与互动贴对抗活动
     *
     * @param companyId        租户ID
     * @param appCode          应用标识
     * @param userId           用户ID
     * @param serviceCode      服务标识
     * @param commonParameters commonParameters
     * @param strJson          请求参数
     * @return 响应对象
     */
    @ResponseBody
    @RequestMapping("v1/appApi/createActivity")
    public ResponseObject createActivity(@PathVariable String companyId, @PathVariable String appCode, @PathVariable String userId, @PathVariable String serviceCode, @Validated CommonParameters commonParameters, @RequestBody String strJson) {
    	ResponseObject resObj = new ResponseObject();
    	logger.info(ValidateCommonParam.getRequestInfo(companyId, appCode, userId, serviceCode, strJson));
    	try {
    		//数据解析
    		Map<String, Object> jsonMap = JSONUtils.json2map(strJson);
    		Map<String, Object> errorMap = new HashMap<String, Object>();
    		//参数校验
    		boolean validate = ValidateCommonParam.validateCommonParam(commonParameters, jsonMap, errorMap);
    		if (!validate) {
    			logger.error("class : PostAppApiController --> method : createActivity " + errorMap.get(Constants.MESSAGE));
    			ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
    			return resObj;
    		}
    		//用户非空校验
    		boolean checkFans = postAppServic.checkFans(commonParameters);
    		if (!checkFans) {
    			logger.error("class : PostAppApiController --> method : createActivity " + GeneralStatus.user_error.enDetail);
    			ValidateCommonParam.userError(resObj);
    			return resObj;
    		}
    		//用户验证
            boolean checkFansStatus = postAppServic.checkFansStatus(commonParameters);
            if (!checkFansStatus) {
                logger.error("class : PostAppApiController --> method : createActivity " + GeneralStatus.user_status_error.enDetail);
                ValidateCommonParam.userStatusError(resObj);
                return resObj;
            }
            
            
            
    		//参数非空校验
    		List<String> names = new ArrayList<String>();
    		names.add(Activity.PID);
    		names.add(Activity.PTYPE);
    		names.add(Activity.DESCRIBE);
    		names.add(Activity.NAME);
    		names.add(Activity.TYPE);
    		validate = ValidateCommonParam.validateValue(names, jsonMap, errorMap);
    		if (!validate) {
    			logger.error("class : PostAppApiController --> method : createActivity " + errorMap.get(Constants.MESSAGE));
    			ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
    			return resObj;
    		}
    		resObj = postAppServic.createActivity(commonParameters, jsonMap);
    	} catch (Exception e) {
    		e.printStackTrace();
    		ValidateCommonParam.innerError(resObj);
    		logger.error("class : PostAppApiController --> method : createActivity处理异常！");
    	}
    	return resObj;
    }
    /**
     * 查询参与活动情况---当前用户的参与情况
     *
     * @param companyId        租户ID
     * @param appCode          应用标识
     * @param userId           用户ID
     * @param serviceCode      服务标识
     * @param commonParameters commonParameters
     * @param strJson          请求参数
     * @return 响应对象
     */
    @ResponseBody
    @RequestMapping("v1/appApi/queryActivity")
    public ResponseObject queryActivity(@PathVariable String companyId, @PathVariable String appCode, @PathVariable String userId, @PathVariable String serviceCode, @Validated CommonParameters commonParameters, @RequestBody String strJson) {
    	ResponseObject resObj = new ResponseObject();
    	logger.info(ValidateCommonParam.getRequestInfo(companyId, appCode, userId, serviceCode, strJson));
    	try {
    		//数据解析
    		Map<String, Object> jsonMap = JSONUtils.json2map(strJson);
    		Map<String, Object> errorMap = new HashMap<String, Object>();
    		//参数校验
    		boolean validate = ValidateCommonParam.validateCommonParam(commonParameters, jsonMap, errorMap);
    		if (!validate) {
    			logger.error("class : PostAppApiController --> method : queryActivity " + errorMap.get(Constants.MESSAGE));
    			ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
    			return resObj;
    		}
    		//用户非空校验
    		boolean checkFans = postAppServic.checkFans(commonParameters);
    		if (!checkFans) {
    			logger.error("class : PostAppApiController --> method : queryActivity " + GeneralStatus.user_error.enDetail);
    			ValidateCommonParam.userError(resObj);
    			return resObj;
    		}
    		
            
    		//参数非空校验
    		List<String> names = new ArrayList<String>();
    		names.add(Activity.PID);
    		validate = ValidateCommonParam.validateValue(names, jsonMap, errorMap);
    		if (!validate) {
    			logger.error("class : PostAppApiController --> method : queryActivity " + errorMap.get(Constants.MESSAGE));
    			ValidateCommonParam.parameterError(resObj, errorMap.get(Constants.MESSAGE));
    			return resObj;
    		}
    		resObj = postAppServic.queryActivity(commonParameters, jsonMap);
    	} catch (Exception e) {
    		e.printStackTrace();
    		ValidateCommonParam.innerError(resObj);
    		logger.error("class : PostAppApiController --> method : queryActivity处理异常！");
    	}
    	return resObj;
    }
}
